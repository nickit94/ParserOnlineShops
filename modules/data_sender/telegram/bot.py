import time
import hashlib
from datetime import datetime

import modules.common.helper as h
import modules.data_sender.telegram.bot_helper as bh
from modules.common import sql_req as sr
from modules.common.db_wrapper import DataBase
from modules.common.file_worker import FileWorker
from modules.data_sender.telegram.telegram_sender import TelegramSender

logger = h.logging.getLogger('Bot')


class Bot(TelegramSender):
    """
    –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –û–î–ù–û–ì–û –ò–ó –û–°–ù–û–í–ù–´–• –ú–û–î–£–õ–ï–ô –ü–†–û–ï–ö–¢–ê - DataSender
    –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —é–∑–µ—Ä–±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π:
        - –î–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª (—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
        - –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏, –≤ —Å–ª—É—á–∞–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç
            –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å—Ç–∞–≤–∏—Ç —à—Ç–∞–º–ø
    """

    def __init__(self):
        super().__init__()
        self.ignore_brands = self.config['bot-ignore']['brands'].lower().split('\n')
        self.one_star_per = float(self.config['bot-stars']['one_star_per'])
        self.two_star_per = float(self.config['bot-stars']['two_star_per'])
        self.three_star_per = float(self.config['bot-stars']['three_star_per'])
        self.four_star_per = float(self.config['bot-stars']['four_star_per'])
        self.five_star_per = float(self.config['bot-stars']['five_star_per'])
        self.irrelevant_url_text = self.config['bot']['irrelevant_url_text']
        self.hash_tag_actual = '#' + self.config['bot']['hash_tag_actual']
        self.max_num_act_post_telegram = int(self.config['bot']['max_num_act_post_telegram'])

        self.pc_product_list = []
        self.posts_in_telegram_list = []
        self.db = DataBase()

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
        self.except_model_names_telegram_dict = FileWorker.dict_data.load(h.EXCEPT_MODEL_NAMES_TELEGRAM_PATH)
        self.stats_prods_dict = FileWorker.dict_data_str_int.load(h.STATS_PRODS_DICTIONARY_PATH)
        self.stats_shops_dict = FileWorker.dict_data_str_int.load(h.STATS_SHOPS_DICTIONARY_PATH)

        self.posts_in_telegram_list = bh.load_msg_in_telegram_list()
        self.num_all_post, self.num_actual_post = bh.load_num_posts()

    def __generate_caption(self, category, brand_name, model_name, ram, rom, price, avg_actual_price, hist_min_price,
                           hist_min_date, hist_min_shop, versions_list, is_actual):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ (–æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
         - versions_list: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤–∏–¥–∞ [(shop, url, color), (...), ...]
        """

        if not versions_list:
            logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –ø—É—Å—Ç—ã–º versions_list, –ø—Ä–æ–ø—É—Å–∫")
            return None

        # –ù–ê–ó–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò —Å —É—á–µ—Ç–æ–º —Å–ª–æ–≤–∞—Ä—è —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        caption = h.replace_value_from_dictionary(self.except_model_names_telegram_dict, '<b>{} {} {}</b>\n'.format(
            category[0:-1].title(), brand_name.title(), model_name.title()))

        # –ö–û–ú–ü–õ–ï–ö–¢–ê–¶–ò–Ø
        caption += '<b>{}/{} GB</b>\n\n'.format(ram, rom) \
            if (ram and brand_name != 'apple') \
            else '<b>{} GB</b>\n\n'.format(rom)

        # –û–ì–û–ù–¨–ö–ò
        star = 0
        per = h.per_num_of_num(price, avg_actual_price)

        if self.one_star_per <= per < self.two_star_per:
            star = 1
        if self.two_star_per <= per < self.three_star_per:
            star = 2
        if self.three_star_per <= per < self.four_star_per:
            star = 3
        if self.four_star_per <= per < self.five_star_per:
            star = 4
        if self.five_star_per < per:
            star = 5

        caption += 'üî•' * star + '\n'

        # –¶–ï–ù–ê
        caption += '–í—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: <b><i>{}</i></b> ‚ÇΩ\n'.format(
            '{0:,}'.format(price).replace(',', ' ')
        )
        caption += '<i>(–î–µ—à–µ–≤–ª–µ –Ω–∞ {}</i> ‚ÇΩ<i> –æ—Ç —Å—Ä–µ–¥–Ω–µ–π)</i>\n\n'.format(
            '{0:,}'.format(int(avg_actual_price - price)).replace(',', ' ')
        )

        # –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ú–ò–ù–ò–ú–£–ú
        if price <= hist_min_price:
            caption += '<i>–î–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è</i>\n'
        else:
            date_time = datetime.strptime(str(hist_min_date), '%Y-%m-%d %H:%M:%S.%f').strftime('%d.%m.%Y')
            caption += '<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {}</i> ‚ÇΩ <i>–±—ã–ª–∞ –≤ {} {}</i>\n'.format(
                '{0:,}'.format(hist_min_price).replace(',', ' '),
                h.TRUE_SHOP_NAMES[hist_min_shop - 1], date_time
            )

        # –°–ü–ò–°–û–ö –°–°–´–õ–û–ö –î–õ–Ø –ü–û–ö–£–ü–ö–ò
        pos_shop, pos_url, pos_color = 0, 1, 2
        shops_set = list(set(item[pos_shop] for item in versions_list))

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        hashtag_shops = ''
        links_shop_list = []
        for shop in shops_set:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            hashtag_shops += '#' + h.SHOPS_NAME_LIST[shop - 1][0] + ' '
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
            urls = ''
            for product in versions_list:
                if product[pos_shop] == shop:
                    urls += '<a href="{}">‚ñ∫ {}</a>\n'.format(bh.get_ref_link(product[pos_url]),
                                                             product[pos_color].title())
            links_shop_list.append(urls)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
        indx = 0
        for link_set in links_shop_list:
            caption += '\n–ö—É–ø–∏—Ç—å –≤ <b><u>{}</u></b>:\n{}'.format(h.TRUE_SHOP_NAMES[shops_set[indx] - 1], link_set)
            indx += 1

        # –•–≠–®–¢–ï–ì–ò
        caption += '\n#{} {}'.format(brand_name, hashtag_shops)
        if is_actual:
            caption += self.hash_tag_actual

        return caption

    def __filtering_data(self):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞
        """
        # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è
        result = []
        for item in self.pc_product_list:
            if not result.count(item):
                result.append(item)
        self.pc_product_list = result

        # –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ –µ–≥–æ –±—Ä–µ–Ω–¥ –∏–º–µ–µ—Ç—Å—è –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ
        result = []
        for item in self.pc_product_list:
            if not self.ignore_brands.count(item.brand_name):
                result.append(item)
        self.pc_product_list = result

    def __prepare_and_send_all_posts(self):
        """
        –†–∞–∑–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        """
        versions_list = []
        # –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ –∏ —Ü–≤–µ—Ç—É, –ø–æ—Å—Ç –≥—Ä—É–ø–ø—ã
        while self.pc_product_list:
            # –í–∑—è—Ç–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            item = self.pc_product_list[0]
            one_version_list = h.find_in_namedtuple_list(self.pc_product_list,
                                                         brand_name=item.brand_name, model_name=item.model_name,
                                                         ram=item.ram, rom=item.rom, price=item.price)
            # –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π
            versions_list.append(one_version_list)
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–∑—è—Ç–æ–π –≥—Ä—É–ø–ø—ã one_version_list
            for item in one_version_list:
                self.pc_product_list.remove(item)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –ó–≤—É–∫ —Ç–æ–ª—å–∫–æ —É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2-—É—Ö
        for i in range(len(versions_list)):
            self.app.loop.run_until_complete(
                self.__send_one_post(versions_list[i], dis_notify=bool(i < (len(versions_list) - 2)))
            )

    async def __send_one_post(self, version_list, dis_notify):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        """
        item = version_list[0]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ –∂–µ –ø–æ—Å—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if h.find_in_namedtuple_list(self.posts_in_telegram_list,
                                     brand_name=item.brand_name, model_name=item.model_name, price=item.price,
                                     ram=item.ram, rom=item.rom, limit_one=True):
            logger.info("Duplicate post, SKIP")
            logger.info(item)
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
        self.num_all_post += 1
        self.num_actual_post += 1

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        bh.inc_stats_products(self.stats_prods_dict, item.brand_name, item.model_name)
        bh.inc_stats_shops(self.stats_shops_dict, list(set(item.shop for item in version_list)))

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
        versions_list = [(item.shop, item.url, item.color) for item in version_list]
        text = self.__generate_caption(
            category=item.category, brand_name=item.brand_name, model_name=item.model_name, ram=item.ram,
            rom=item.rom, price=item.price, avg_actual_price=item.avg_actual_price,
            hist_min_price=item.hist_min_price, hist_min_date=item.hist_min_date, hist_min_shop=item.hist_min_shop,
            versions_list=versions_list, is_actual=True
        )

        img_path = bh.create_and_save_img_for_edit_post(img_url=item.img_url, is_actual=True)
        if not img_path:
            return

        for i in range(3):
            msg_id = self.send_photo_message(img_path=img_path, caption=text, dis_notify=dis_notify)

            if msg_id:
                self.posts_in_telegram_list.append(h.MessagesInTelegram(
                    message_id=msg_id,
                    category=item.category,
                    brand_name=item.brand_name,
                    model_name=item.model_name,
                    ram=item.ram,
                    rom=item.rom,
                    price=item.price,
                    avg_actual_price=item.avg_actual_price,
                    img_url=item.img_url,
                    where_buy_list=[(item.shop, item.color, item.url) for item in version_list],
                    post_datetime=datetime.now(),
                    hist_min_price=item.hist_min_price,
                    hist_min_shop=item.hist_min_shop,
                    hist_min_date=item.hist_min_date,
                    text_hash=hashlib.sha256(text.encode()).hexdigest(),
                    is_actual=True,
                ))
                break

    async def __edit_post_as_irrelevant(self, post, text, current_actual):
        """
        –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π
        """
        # –ï—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π - –≤—ã—Ö–æ–¥–∏–º, –º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ
        if not post.is_actual and not current_actual:
            logger.info("–ü–æ—Å—Ç –±—ã–ª –∏ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º, –Ω–µ –º–µ–Ω—è–µ–º")
            return True

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤–º–µ—Å—Ç–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        if post.is_actual != current_actual:
            logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ {} -> {}".format(post.is_actual, current_actual))

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
            img_path = bh.create_and_save_img_for_edit_post(img_url=post.img_url, is_actual=current_actual)

            # 3 –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç (–∏–∑-–∑–∞ –±–∞–≥–∞ —Ç–µ–ª–µ–≥—Ä–∞–º)
            for i in range(3):
                if self.edit_photo_message(msg_id=post.message_id, img_path=img_path, caption=text):
                    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ edit_message_media!")
                    self.num_actual_post += 1 if current_actual else (-1)
                    time.sleep(1)
                    return True

            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
            return False

        # –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –º–µ–Ω—è–ª –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (true=true) –∏ —Ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è - –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        if hashlib.sha256(text.encode()).hexdigest() != post.text_hash:
            if not self.edit_photo_message_caption(msg_id=post.message_id, caption=text):
                return False

        logger.info("–í –ø–æ—Å—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        return True

    def __checking_irrelevant_posts(self, pr_product_in_stock_list):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        self.db.connect_or_create("parser", "postgres", "1990", "127.0.0.1", "5432")

        # –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ—Å—Ç–∞–º, –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω—É—é, —á–∞—Å—Ç–∏—á–Ω—É—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        new_posts_in_telegram_list = []
        for item in self.posts_in_telegram_list:

            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é:
            act_price_data_list = self.db.execute_read_query(sr.search_actual_prices_by_version_query,
                                                             (item.brand_name, item.model_name, item.ram, item.rom))
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
            act_price_data_in_stock_list = bh.irr_post_search_data_in_stock(act_price_data_list,
                                                                            pr_product_in_stock_list)
            # –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏
            min_act_price_data_in_stock_list = h.find_min_price_in_prices_list(act_price_data_in_stock_list)

            logger.info(("-" * 50) + "item: {}".format(item))
            logger.info("item actual: {}".format(item.is_actual))
            logger.info("act_price_data_list: {}".format(act_price_data_list))
            logger.info("act_price_data_in_stock_list: {}".format(act_price_data_in_stock_list))
            logger.info("min_act_price_data_in_stock_list: {}".format(min_act_price_data_in_stock_list))

            # –ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–Ω—ã –≤ –ø–æ—Å—Ç–µ - –ü–û–°–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ù–ï–ê–ö–¢–£–ê–õ–¨–ù–´–ô
            is_actual = True
            if (min_act_price_data_in_stock_list and min_act_price_data_in_stock_list[0][0] != item.price) or \
                    not min_act_price_data_in_stock_list:
                logger.info("–ü–æ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π - –µ—Å—Ç—å –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–µ(—ã–µ) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ(–∏—è) –∏–ª–∏ –∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞")
                is_actual = False

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            if is_actual:
                versions_list = [(it[1], it[4], it[3]) for it in min_act_price_data_in_stock_list]
            else:
                versions_list = [(it[0], it[2], it[1]) for it in item.where_buy_list]

            new_text = self.__generate_caption(
                category=item.category, brand_name=item.brand_name, model_name=item.model_name,
                ram=item.ram, rom=item.rom, price=item.price, avg_actual_price=item.avg_actual_price,
                hist_min_price=item.hist_min_price, hist_min_date=item.hist_min_date, hist_min_shop=item.hist_min_shop,
                versions_list=versions_list, is_actual=is_actual
            )

            if not self.app.loop.run_until_complete(
                    self.__edit_post_as_irrelevant(item, new_text, is_actual)
            ):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç!")
                is_actual = True

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
            bh.irr_post_add_item_in_msg_in_telegram_list(new_posts_in_telegram_list,
                                                         self.max_num_act_post_telegram, item,
                                                         hashlib.sha256(new_text.encode()).hexdigest(), is_actual)

        self.posts_in_telegram_list = new_posts_in_telegram_list
        self.db.disconnect()

    def send_posts(self, pc_product_list):
        """
        –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        # pc_product_list = get_data()
        if not pc_product_list:
            logger.info("–ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø TELEGRAM")
            return

        self.pc_product_list = pc_product_list
        self.__filtering_data()
        self.__prepare_and_send_all_posts()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π
        FileWorker.dict_data.save(h.STATS_PRODS_DICTIONARY_PATH, data=self.stats_prods_dict)
        FileWorker.dict_data.save(h.STATS_SHOPS_DICTIONARY_PATH, data=self.stats_shops_dict)
        FileWorker.list_data.save(h.NUM_POSTS_IN_TELEGRAM_PATH, data=[self.num_all_post, self.num_actual_post])
        FileWorker.csv_data.save(
            h.MESSAGES_IN_TELEGRAM_LIST_PATH, data=self.posts_in_telegram_list, namedtuple_type=h.MessagesInTelegram)

    def checking_irrelevant_posts(self, pr_product_in_stock_list):
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤
        """
        if not pr_product_in_stock_list:
            logger.error("–ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø –ù–ï–ê–ö–¢–£–ê–õ–¨–ù–´–• –ü–û–°–¢–û–í")
            return

        self.__checking_irrelevant_posts(pr_product_in_stock_list)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π
        FileWorker.list_data.save(h.NUM_POSTS_IN_TELEGRAM_PATH, data=[self.num_all_post, self.num_actual_post])
        FileWorker.csv_data.save(
            h.MESSAGES_IN_TELEGRAM_LIST_PATH, data=self.posts_in_telegram_list, namedtuple_type=h.MessagesInTelegram)
